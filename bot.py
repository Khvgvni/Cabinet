import logging
import json
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8259299108:AAENuDFq8sb2OysuUacFQETMdhJg1LM-jmw"  
GROUP_CHAT_ID = -1003014842866  
PRIVACY_URL = "https://docs.google.com/document/d/19eJqUD_zbSmc7_ug07XXYr25cV4BATTqBQwgsgdGX0U/edit?usp=sharing"

# üìå –°—Å—ã–ª–∫–∏ –∏ –º–µ–¥–∏–∞
WEB_APP_URL = "https://khvgvni.github.io/Cabinet/"
ROUTE_IMG = "https://raw.githubusercontent.com/Khvgvni/Cabinet/68248242d6ba3a80bc1d2c5d86f4c003e4b18cfb/Road%20map.jpg"
INVITE_IMG = "https://raw.githubusercontent.com/Khvgvni/Cabinet/d3ef68f9ae102683d9c5c5dd797d163aa02c3566/Invitation.png"
DESTINATION = "–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π –∫—Ä–∞–π, –ß–∏—Ç–∞, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è —É–ª–∏—Ü–∞, 15–ê"

# üìå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# ---------- –°–¢–ê–†–¢ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("üé™ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEB_APP_URL))],
        [InlineKeyboardButton("üçΩ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª", callback_data="book_table")],
        [InlineKeyboardButton("üöï –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏", callback_data="order_taxi")],
        [InlineKeyboardButton("üéü –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π", callback_data="invite")],
        [InlineKeyboardButton("üë• –•–æ—á—É –≤ –∫–æ–º–∞–Ω–¥—É", callback_data="join_team")],
        [InlineKeyboardButton("üé≠ –ê—Ñ–∏—à–∞", callback_data="show_afisha")]
    ]
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç *Cabinet!* üéâ\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "üçΩ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª\n"
        "üéü –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π\n"
        "üöï –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏\n"
        "üë• –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–æ–º–∞–Ω–¥—É\n\n"
        "‚ú® –£ –Ω–∞—Å –µ—Å—Ç—å [–º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ] –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.\n\n"
        f"‚öñÔ∏è –ü—Ä–æ—Ö–æ–¥—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å [–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏]({PRIVACY_URL})\n\n"
        "_P.S. –Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –Ω–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–≤–æ–π –≤–µ—á–µ—Ä —Å–∞–º—ã–º–∏ —è—Ä–∫–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏ üòâ_"
    )
    if update.message:
        await update.message.reply_text(
            text, reply_markup=InlineKeyboardMarkup(kb),
            parse_mode="Markdown", disable_web_page_preview=True
        )
    else:
        await update.callback_query.edit_message_text(
            text, reply_markup=InlineKeyboardMarkup(kb),
            parse_mode="Markdown", disable_web_page_preview=True
        )


# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –ò–ó WEBAPP ----------
async def webapp_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = json.loads(update.message.web_app_data.data)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp: {data}")

        if data.get("type") == "booking":
            msg = (
                f"üçΩ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω—å!\n\n"
                f"üë§ {data['name']}\n"
                f"üìû {data['phone']}"
            )
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)
            await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")

        elif data.get("type") == "ticket":
            msg = (
                f"üéü –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ!\n\n"
                f"üë§ {data['name']}\n"
                f"üìû {data['phone']}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['count']}"
            )
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)
            await update.message.reply_text("‚úÖ –í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

        elif data.get("type") == "team":
            msg = (
                f"üë• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É!\n\n"
                f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {data['role']}\n"
                f"üë§ {data['name']}\n"
                f"üìû {data['phone']}"
            )
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)
            await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")

        elif data.get("type") == "taxi":
            msg = (
                f"üöï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏!\n\n"
                f"üìç –û—Ç–∫—É–¥–∞: {data['from']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {data['time']}"
            )
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)
            await update.message.reply_text("‚úÖ –¢–∞–∫—Å–∏ –∑–∞–∫–∞–∑–∞–Ω–æ! üöñ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ WebApp: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")


# ---------- –ü–†–û–ß–ò–ï –í–ö–õ–ê–î–ö–ò ----------
async def show_afisha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text("üé≠ –ê—Ñ–∏—à–∞: (—Å—é–¥–∞ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è)")


async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_photo(INVITE_IMG, caption="üéü –í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π!")


async def order_taxi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üó∫ –°—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞", callback_data="show_route")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await q.message.edit_text("üöï –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


async def show_route(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_photo(ROUTE_IMG, caption=f"üìç –ù–∞—à –∞–¥—Ä–µ—Å: {DESTINATION}")
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    await q.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb)


# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ----------
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    if data == "invite":
        return await invite(update, context)
    elif data == "order_taxi":
        return await order_taxi(update, context)
    elif data == "show_route":
        return await show_route(update, context)
    elif data == "show_afisha":
        return await show_afisha(update, context)
    elif data == "main_menu":
        return await start(update, context)


# ---------- MAIN ----------
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webapp_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å WebApp API!")
    app.run_polling()


if __name__ == "__main__":
    main()
