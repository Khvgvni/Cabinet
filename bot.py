import logging
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)

# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
GROUP_CHAT_ID = -1003014842866  # ID —Ç–≤–æ–µ–π –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã

# üìå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
ASK_NAME, ASK_PHONE = range(2)


# ---------- –°–¢–ê–†–¢ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("üçΩ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª", callback_data="book_table")],
        [InlineKeyboardButton("üöï –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏", callback_data="order_taxi")],
        [InlineKeyboardButton("üéü –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π", callback_data="invite")],
        [InlineKeyboardButton("üë• –•–æ—á—É –≤ –∫–æ–º–∞–Ω–¥—É", callback_data="join_team")],
    ]
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç *Cabinet!* üéâ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await update.message.reply_text(
        text, reply_markup=InlineKeyboardMarkup(kb),
        parse_mode="Markdown"
    )


# ---------- –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï ----------
async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return ASK_NAME


async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    return ASK_PHONE


async def finish_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    name = context.user_data.get("name")

    msg = (
        f"üçΩ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω—å!\n\n"
        f"üë§ {name}\n"
        f"üìû {phone}"
    )
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)
    await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# ---------- –ü–†–û–ß–ò–ï –í–ö–õ–ê–î–ö–ò ----------
async def order_taxi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text("üöï –¢–∞–∫—Å–∏ –ø–æ–∫–∞ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é üôÇ")


async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text("üéü –í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π!")


async def join_team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text("üë• –ó–∞—è–≤–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")


# ---------- MAIN ----------
def main():
    app = Application.builder().token(TOKEN).build()

    # –ú–µ–Ω—é
    app.add_handler(CommandHandler("start", start))

    # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_booking, pattern="^book_table$")],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_booking)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(order_taxi, pattern="^order_taxi$"))
    app.add_handler(CallbackQueryHandler(invite, pattern="^invite$"))
    app.add_handler(CallbackQueryHandler(join_team, pattern="^join_team$"))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()
