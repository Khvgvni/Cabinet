import logging
import csv
import os
import json
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)

# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("8259299108:AAENuDFq8sb2OysuUacFQETMdhJg1LM-jmw") or "8259299108:AAENuDFq8sb2OysuUacFQETMdhJg1LM-jmw"
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "-1003014842866"))
PRIVACY_URL = "https://docs.google.com/document/d/19eJqUD_zbSmc7_ug07XXYr25cV4BATTqBQwgsgdGX0U/edit?usp=sharing"

# üìå –°—Å—ã–ª–∫–∏ –∏ –º–µ–¥–∏–∞
WEB_APP_URL = "https://khvgvni.github.io/Cabinet/"
ROUTE_IMG = "https://raw.githubusercontent.com/Khvgvni/Cabinet/68248242d6ba3a80bc1d2c5d86f4c003e4b18cfb/Road%20map.jpg"
INVITE_IMG = "https://raw.githubusercontent.com/Khvgvni/Cabinet/d3ef68f9ae102683d9c5c5dd797d163aa02c3566/Invitation.png"
END_LAT, END_LON = 52.033938, 113.500514  # —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª—É–±–∞

# üìå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üìå –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    REG_NAME, REG_PHONE,
    TABLE_NAME, TABLE_PHONE, TABLE_COMMENT,
    TEAM_NAME, TEAM_PHONE, TEAM_ROLE,
    WAITING_LOCATION
) = range(9)


# ---------- –£–¢–ò–õ–ò–¢–´ ----------
def nav_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])


def get_user_data(user_id: int):
    try:
        with open("users.csv", "r", encoding="utf-8") as f:
            r = csv.reader(f, delimiter=";")
            next(r, None)
            for row in r:
                if len(row) >= 3 and row[2] == str(user_id):
                    return row
    except FileNotFoundError:
        return None
    return None


def is_registered(user_id: int) -> bool:
    return get_user_data(user_id) is not None


# ---------- –°–¢–ê–†–¢ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if is_registered(user_id):
        return await show_main_menu(update, context)

    kb = [
        [InlineKeyboardButton("üé≠ –ê—Ñ–∏—à–∞", callback_data="show_afisha")],
        [InlineKeyboardButton("üî∂ –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="register")]
    ]
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç *Cabinet!* üéâ\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—è–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏–ª–∏, –ø—Ä–æ–π–¥—è –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, "
        "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª, –ø–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç –Ω–∞ –∏–≤–µ–Ω—Ç –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.\n\n"
        "‚ú® –£ –Ω–∞—Å —Ç–∞–∫–∂–µ –µ—Å—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.\n\n"
        f"–ü—Ä–æ—Ö–æ–¥—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å [–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏]({PRIVACY_URL})\n\n"
        "_P.S. –Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –Ω–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–≤–æ–π –≤–µ—á–µ—Ä —Å–∞–º—ã–º–∏ —è—Ä–∫–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏ üòâ_"
    )
    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kb),
                                        parse_mode="Markdown", disable_web_page_preview=True)
    else:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb),
                                                      parse_mode="Markdown", disable_web_page_preview=True)


# ---------- –ú–ï–ù–Æ ----------
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé™ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=WEB_APP_URL)],
        [InlineKeyboardButton("üçΩ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª", callback_data="book_table")],
        [InlineKeyboardButton("üöï –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏", callback_data="order_taxi")],
        [InlineKeyboardButton("üéü –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π", callback_data="invite")],
        [InlineKeyboardButton("üë• –•–æ—á—É –≤ –∫–æ–º–∞–Ω–¥—É", callback_data="join_team")],
        [InlineKeyboardButton("üé≠ –ê—Ñ–∏—à–∞", callback_data="show_afisha")]
    ])
    text = "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if update.message:
        await update.message.reply_text(text, reply_markup=kb)
    else:
        await update.callback_query.edit_message_text(text, reply_markup=kb)


# ---------- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ----------
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return REG_NAME

async def reg_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["reg_name"] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    return REG_PHONE

async def reg_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["reg_phone"] = update.message.text
    user_id = update.effective_user.id

    with open("users.csv", "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f, delimiter=";")
        writer.writerow([context.user_data["reg_name"], context.user_data["reg_phone"], user_id])

    await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=nav_keyboard())
    return ConversationHandler.END


# ---------- –ë–†–û–ù–¨ ----------
async def book_table(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return TABLE_NAME

async def table_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["table_name"] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    return TABLE_PHONE

async def table_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["table_phone"] = update.message.text
    await update.message.reply_text("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - –Ω–µ—Ç):")
    return TABLE_COMMENT

async def table_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["table_comment"] = update.message.text
    user_id = update.effective_user.id

    with open("tables.csv", "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f, delimiter=";")
        writer.writerow([
            context.user_data["table_name"], context.user_data["table_phone"],
            context.user_data["table_comment"], user_id
        ])

    msg = (
        f"üçΩ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å!\n\n"
        f"üë§ {context.user_data['table_name']}\n"
        f"üìû {context.user_data['table_phone']}\n"
        f"üí¨ {context.user_data['table_comment']}"
    )
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)

    await update.message.reply_text("‚úÖ –£–≤–∞–∂–∞–µ–º—ã–π –≥–æ—Å—Ç—å, —Å—Ç–æ–ª –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω! –ñ–¥—ë–º –í–∞—Å!", reply_markup=nav_keyboard())
    return ConversationHandler.END


# ---------- –¢–ê–ö–°–ò ----------
async def order_taxi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üó∫ –°—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞", callback_data="show_route")],
        [InlineKeyboardButton("üöï –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏", callback_data="send_location")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await q.message.edit_text("üöï –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

async def show_route(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_photo(ROUTE_IMG, caption=f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª—É–±–∞: {END_LAT}, {END_LON}")
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await q.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb)

async def send_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    kb = ReplyKeyboardMarkup(
        [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        one_time_keyboard=True, resize_keyboard=True
    )
    await q.message.reply_text("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=kb)
    return WAITING_LOCATION

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.location:
        lat, lon = update.message.location.latitude, update.message.location.longitude
        url = (
    f"https://3.redirect.appmetrica.yandex.com/route?"
    f"start-lat={lat}&start-lon={lon}"
    f"&end-lat={END_LAT}&end-lon={END_LON}"
    f"&end-text=–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π+–∫—Ä–∞–π,+–ß–∏—Ç–∞,+–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è+15–ê"
)
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üöï –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å Go", url=url)]])
        await update.message.reply_text("‚úÖ –ú–∞—Ä—à—Ä—É—Ç –≥–æ—Ç–æ–≤!", reply_markup=ReplyKeyboardRemove())
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏:", reply_markup=kb)
        await update.message.reply_text("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=nav_keyboard())
        return ConversationHandler.END


# ---------- –•–û–ß–£ –í –ö–û–ú–ê–ù–î–£ ----------
async def join_team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return TEAM_NAME

async def team_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["team_name"] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    return TEAM_PHONE

async def team_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["team_phone"] = update.message.text
    await update.message.reply_text("üíº –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    return TEAM_ROLE

async def team_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["team_role"] = update.message.text
    user_id = update.effective_user.id

    with open("team.csv", "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f, delimiter=";")
        writer.writerow([
            context.user_data["team_name"], context.user_data["team_phone"],
            context.user_data["team_role"], user_id
        ])

    msg = (
        f"üë• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É!\n\n"
        f"üë§ {context.user_data['team_name']}\n"
        f"üìû {context.user_data['team_phone']}\n"
        f"üíº {context.user_data['team_role']}"
    )
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)

    await update.message.reply_text(
        "‚úÖ –í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!\n–•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è! üå∏",
        reply_markup=nav_keyboard()
    )
    return ConversationHandler.END


# ---------- –ü–†–ò–ì–õ–ê–°–ò–¢–ï–õ–¨–ù–´–ô ----------
async def send_invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_photo(INVITE_IMG, caption="üéü –í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π!")
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    await q.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)


# ---------- –ê–§–ò–®–ê ----------
async def show_afisha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text("üé≠ –ê—Ñ–∏—à–∞: (—Å—é–¥–∞ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è)", reply_markup=nav_keyboard())


# ---------- WEBAPP –î–ê–ù–ù–´–ï ----------
async def handle_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = json.loads(update.message.web_app_data.data)
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp: {data}")

        if data["type"] == "booking":
            msg = (
                f"üçΩ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å (WebApp)!\n\n"
                f"üë§ –§–ò–û: {data.get('name')}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
            )
            await update.message.reply_text("‚úÖ –í–∞—à —Å—Ç–æ–ª –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω! –ñ–¥—ë–º –í–∞—Å!")
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)

        elif data["type"] == "team":
            msg = (
                f"üë• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É (WebApp)!\n\n"
                f"üë§ –§–ò–û: {data.get('name')}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
                f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {data.get('role')}"
            )
            await update.message.reply_text("‚úÖ –í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!")
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)

        elif data["type"] == "invite":
            await update.message.reply_text("üéü –í–æ—Ç –≤–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π!")
            await update.message.reply_photo(INVITE_IMG)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")


# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ----------
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    if data == "register":
        return await register(update, context)
    elif data == "book_table":
        return await book_table(update, context)
    elif data == "order_taxi":
        return await order_taxi(update, context)
    elif data == "show_route":
        return await show_route(update, context)
    elif data == "send_location":
        return await send_location(update, context)
    elif data == "join_team":
        return await join_team(update, context)
    elif data == "invite":
        return await send_invite(update, context)
    elif data == "show_afisha":
        return await show_afisha(update, context)
    elif data == "main_menu":
        return await show_main_menu(update, context)


# ---------- MAIN ----------
def main():
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    conv_reg = ConversationHandler(
        entry_points=[CallbackQueryHandler(register, pattern="register")],
        states={
            REG_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_name)],
            REG_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_phone)],
        },
        fallbacks=[CommandHandler("cancel", start)],
    )

    # –ë—Ä–æ–Ω—å
    conv_table = ConversationHandler(
        entry_points=[CallbackQueryHandler(book_table, pattern="book_table")],
        states={
            TABLE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, table_name)],
            TABLE_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, table_phone)],
            TABLE_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, table_comment)],
        },
        fallbacks=[CommandHandler("cancel", start)],
    )

    # –¢–∞–∫—Å–∏
    conv_taxi = ConversationHandler(
        entry_points=[CallbackQueryHandler(send_location, pattern="send_location")],
        states={
            WAITING_LOCATION: [MessageHandler(filters.LOCATION, handle_location)],
        },
        fallbacks=[CommandHandler("cancel", start)],
    )

    # –ö–æ–º–∞–Ω–¥–∞
    conv_team = ConversationHandler(
        entry_points=[CallbackQueryHandler(join_team, pattern="join_team")],
        states={
            TEAM_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, team_name)],
            TEAM_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, team_phone)],
            TEAM_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, team_role)],
        },
        fallbacks=[CommandHandler("cancel", start)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_reg)
    app.add_handler(conv_table)
    app.add_handler(conv_taxi)
    app.add_handler(conv_team)
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp))
    app.add_handler(CallbackQueryHandler(handle_button))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()
